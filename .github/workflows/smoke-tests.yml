name: DE_Portal test Report

on:
  schedule:
    - cron: "30 3 * * 1-5"   # 9:00 AM IST, Monday‚ÄìFriday
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install additional tools
        run: sudo apt-get update && sudo apt-get install -y bc jq

      - name: Run Playwright smoke tests with HTML + JSON report
        id: tests
        continue-on-error: true
        run: |
          mkdir -p reports
          ts=$(date +'%Y-%m-%d_%H-%M-%S')
          
          # Run tests with explicit JSON reporter
          npx playwright test --grep @smoke 
          
          # Move HTML report
          if [ -d "playwright-report" ]; then
            mv playwright-report "reports/$ts"
          else
            mkdir -p "reports/$ts"
            echo "No HTML report generated" > "reports/$ts/index.html"
          fi
          
          # Copy JSON results
          if [ -f "test-results/results.json" ]; then
            cp "test-results/results.json" "reports/$ts/results.json"
            echo "‚úÖ Found results.json"
          else
            echo "‚ùå No results.json file found"
            echo '{"stats":{"expected":0,"unexpected":1,"flaky":0,"skipped":0,"duration":0},"suites":[]}' > "reports/$ts/results.json"
          fi
          
          echo "REPORT_TS=$ts" >> $GITHUB_ENV

      - name: Deploy Playwright reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          publish_branch: gh-pages
          keep_files: true

      - name: Parse results and send summary to Teams
        if: always()
        run: |
          RESULTS_FILE="reports/$REPORT_TS/results.json"
          
          if [ ! -f "$RESULTS_FILE" ]; then
            echo "Results file not found"
            exit 1
          fi
          
          # Parse test results using jq
          TOTAL=$(jq -r '.stats.expected + .stats.unexpected + .stats.flaky + .stats.skipped' "$RESULTS_FILE")
          PASSED=$(jq -r '.stats.expected' "$RESULTS_FILE")
          FAILED=$(jq -r '.stats.unexpected' "$RESULTS_FILE")
          FLAKY=$(jq -r '.stats.flaky' "$RESULTS_FILE")
          DURATION=$(jq -r '.stats.duration' "$RESULTS_FILE")
          
          # Convert duration from milliseconds to seconds
          DURATION_SEC=$((DURATION / 1000))
          
          # Determine status
          if [ "$FAILED" -gt 0 ]; then
            STATUS="‚ùå Tests Failed"
            COLOR="attention"
          elif [ "$FLAKY" -gt 0 ]; then
            STATUS="‚ö†Ô∏è Tests Passed with Flaky Tests"
            COLOR="warning"
          else
            STATUS="‚úÖ All Tests Passed"
            COLOR="good"
          fi
          
          # Send to Teams
          curl -H 'Content-Type: application/json' \
               -d "{
                 \"@type\": \"MessageCard\",
                 \"@context\": \"http://schema.org/extensions\",
                 \"themeColor\": \"$COLOR\",
                 \"summary\": \"DE_Portal Test Results\",
                 \"sections\": [{
                   \"activityTitle\": \"üéâ DE_Portal Test Results\",
                   \"activitySubtitle\": \"$STATUS\",
                   \"facts\": [
                     {\"name\": \"üìä Summary\", \"value\": \"‚Ä¢ Total: $TOTAL tests ‚Ä¢ Passed: $PASSED ‚Ä¢ Failed: $FAILED ‚Ä¢ Flaky: $FLAKY ‚Ä¢ Duration: ${DURATION_SEC}s\"}
                   ]
                 }]
               }" \
               ${{ secrets.TEAMS_WEBHOOK_URL }}